// ==============================================================
// Copyright Â©2017 by Oracle
// All Rights Reserved.
// ==============================================================
package com.oracle.danalyzer;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;
import java.util.Iterator;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.KeyboardFocusManager;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 * @author jie.chen@oracle.com
 */
public class DAnalyzerFace extends javax.swing.JFrame implements ActionListener, DAConstants {

    boolean fake = false;

    static boolean enableAgile = true;
    static String referral;
    static int intCountLimit;
    static String about = null;
    static final String CLICK_CONNECT_LDAP = "Click Connect LDAP";
    static final String CLICK_VALIDATE_USER = "Click Validate";
    static final String CLICK_EXPORT_LDIF = "Click Export";

    String dataFile = System.getProperty("user.dir") + File.separator + "DAnalyzer.dat";
    String viewFile = System.getProperty("user.dir") + File.separator + "DAnalyzer.html";

    /*
    -Dinclude.agile=true    // default is true
    -Dldap.referral=follow  // default is follow, value could be: follow, ignore or throw
    -Dldap.countlimit=20    //default is 1001
     */
    static {

        enableAgile = !"false".equals(System.getProperty("include.agile"));

        about = APP_NAME + " for Oracle Weblogic\n\n"
                + "Supported version\n"
                + "        Weblogic: 11g, 12c"
                + (enableAgile ? "\n        Agile PLM: 9.3.1, 9.3.2, 9.3.3, 9.3.4, 9.3.5, 9.3.6" : "");
    }

    static String[][] ldapAttrs = new String[][]{
        {"*", null, ATT_DOMAIN, null, null},
        {"*", ATT_PRINCIPAL, ATT_PRINCIPAL_JC, null, null},
        {"*", ATT_CREDENTIAL, ATT_CREDENTIAL_JC, null, null},
        {"*", null, ATT_MECHANISM, null, null},
        {"*", ATT_USER_BASE_DN, ATT_USER_BASE_DN_JC, null, null},
        {"*", ATT_ALL_USERS_FILTER, ATT_ALL_USERS_FILTER_JC, null, null},
        {"*", ATT_USER_SEARCH_SCOPE, ATT_USER_SEARCH_SCOPE_JC, null, null},
        {"", ATT_USER_FROM_NAME_FILTER, null, null, null},
        {"*", ATT_USER_NAME_ATTRIBUTE, null, null, null},
        {"*", ATT_USER_OBJECT_CLASS, null, null, null},
        {"*", ATT_GROUP_BASE_DN, ATT_GROUP_BASE_DN_JC, null, null},
        {"*", ATT_ALL_GROUPS_FILTER, ATT_ALL_GROUPS_FILTER_JC, null, null},
        {"*", ATT_GROUP_SEARCH_SCOPE, ATT_GROUP_SEARCH_SCOPE_JC, null, null},
        {"", ATT_GROUP_FROM_NAME_FILTER, null, null, null},
        {"*", ATT_STATIC_GROUP_NAME_ATTRIBUTE, null, null, null},
        {"*", ATT_STATIC_GROUP_OBJECT_CLASS, null, null, null},
        {"*", ATT_STATIC_MEMBER_DN_ATTRIBUTE, null, null, null},
        {"*", ATT_STATIC_GROUP_DNS_FROM_MEMBER_DN_FILTER, ATT_STATIC_GROUP_DNS_FROM_MEMBER_DN_FILTER_2, null, null},
        {"*", ATT_GUID_ATTRIBUTE, null, null, null},
        {"*", null, ATT_USER_ENTRY_DN_ATTRIBUTE, null, null},
        {"*", null, ATT_AGILE_MANDATORY_ATTRIBUTES, null, null}
    };

    LinkedHashMap<String, Object> mapLDAPSettings = new LinkedHashMap<String, Object>();

    private JMenuItem pmUserGroupExport; // popup menu to export user/group LDIF

    /**
     * Creates new form DAnalyzerFace
     */
    public DAnalyzerFace() {
        //readVMs(); // move to static method
        initComponents();
        initMyComponents();
        initLDAPTypes();
        showRecommendation(false, true);
        //readFromDataFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        tpUserGroup = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUsers = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbGroups = new javax.swing.JTable();
        btCheckSettings = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbSettings = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtHostURL = new javax.swing.JTextField();
        cbDirType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUserPwd = new javax.swing.JPasswordField();
        btCheckUser = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbLogs = new javax.swing.JTable();
        pbStatus = new javax.swing.JProgressBar();
        mnBar = new javax.swing.JMenuBar();
        mnHelper = new javax.swing.JMenu();
        mnViewLog = new javax.swing.JMenuItem();
        mnSaveLog = new javax.swing.JMenuItem();
        mnClearLog = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnAbout = new javax.swing.JMenuItem();
        mnExit = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setTitle("DAnalyzer for Oracle Weblogic");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tpUserGroup.setName("Users"); // NOI18N

        tbUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "DN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbUsers);

        tpUserGroup.addTab("Users", jScrollPane1);

        tbGroups.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "DN"
            }
        ));
        jScrollPane3.setViewportView(tbGroups);

        tpUserGroup.addTab("User Groups", jScrollPane3);

        btCheckSettings.setText("Connect");
        btCheckSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCheckSettingsActionPerformed(evt);
            }
        });

        tbSettings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbSettings.getTableHeader().setReorderingAllowed(false);
        tbSettings.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tbSettingsInputMethodTextChanged(evt);
            }
        });
        tbSettings.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tbSettingsKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(tbSettings);

        txtHostURL.setText("ldap://ldapserver:389");

        cbDirType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDirTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("Directory Server");

        jLabel2.setText("Directory URL");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbDirType, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtHostURL, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHostURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDirType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("User ID");

        jLabel4.setText("Password");

        btCheckUser.setText("Validate");
        btCheckUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCheckUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tpUserGroup)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btCheckSettings))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtUserPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btCheckUser)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btCheckSettings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tpUserGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtUserPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCheckUser))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel2);

        tbLogs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Request", "Parameter", "Response", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbLogs.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tbLogs);
        if (tbLogs.getColumnModel().getColumnCount() > 0) {
            tbLogs.getColumnModel().getColumn(0).setMinWidth(20);
            tbLogs.getColumnModel().getColumn(0).setPreferredWidth(20);
            tbLogs.getColumnModel().getColumn(0).setMaxWidth(20);
            tbLogs.getColumnModel().getColumn(1).setMinWidth(150);
            tbLogs.getColumnModel().getColumn(1).setPreferredWidth(150);
            tbLogs.getColumnModel().getColumn(1).setMaxWidth(150);
        }

        jSplitPane1.setRightComponent(jScrollPane5);

        mnHelper.setText("Helper");

        mnViewLog.setText("View Report");
        mnViewLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnViewLogActionPerformed(evt);
            }
        });
        mnHelper.add(mnViewLog);

        mnSaveLog.setText("Save Report");
        mnSaveLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnSaveLogActionPerformed(evt);
            }
        });
        mnHelper.add(mnSaveLog);

        mnClearLog.setText("Clear Report");
        mnClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnClearLogActionPerformed(evt);
            }
        });
        mnHelper.add(mnClearLog);
        mnHelper.add(jSeparator1);

        mnAbout.setText("About");
        mnAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnAboutActionPerformed(evt);
            }
        });
        mnHelper.add(mnAbout);

        mnExit.setText("Exit");
        mnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnExitActionPerformed(evt);
            }
        });
        mnHelper.add(mnExit);

        mnBar.add(mnHelper);

        setJMenuBar(mnBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(354, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(686, 686, 686))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pbStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnAboutActionPerformed

        JOptionPane.showMessageDialog(null, about, null, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnAboutActionPerformed

    private void cbDirTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDirTypeActionPerformed
        if (cbDirType.getSelectedItem().equals(this.mapLDAPSettings.get(ATT_LDAP_PROVIDER))) {
            return;
        }
        showRecommendation(true, false);
    }//GEN-LAST:event_cbDirTypeActionPerformed

    private void btCheckSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCheckSettingsActionPerformed
        new LongRunningThread(CLICK_CONNECT_LDAP, null).start();
    }//GEN-LAST:event_btCheckSettingsActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void mnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnExitActionPerformed
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        readLDAPSettings(false);
        saveLDAPSettings();
        Window window = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
        if (window != null) {
            WindowEvent windowClosing = new WindowEvent(window, WindowEvent.WINDOW_CLOSING);
            window.dispatchEvent(windowClosing);
        }
    }//GEN-LAST:event_mnExitActionPerformed

    private void btCheckUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCheckUserActionPerformed
        new LongRunningThread(CLICK_VALIDATE_USER, null).start();


    }//GEN-LAST:event_btCheckUserActionPerformed

    private void mnSaveLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnSaveLogActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save DAnalyzer Log");
        String ext = ".html";
        fileChooser.setFileFilter(new FileNameExtensionFilter(ext, ext));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            saveLogReport(fileToSave.getAbsolutePath() + ext);
        }
    }//GEN-LAST:event_mnSaveLogActionPerformed

    private void tbSettingsInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tbSettingsInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tbSettingsInputMethodTextChanged

    private void mnClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnClearLogActionPerformed
        DefaultTableModel tbModel = (DefaultTableModel) this.tbLogs.getModel();
        tbModel.setRowCount(0);
    }//GEN-LAST:event_mnClearLogActionPerformed

    private void tbSettingsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbSettingsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tbSettingsKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        readLDAPSettings(false);
        saveLDAPSettings();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing

    private void mnViewLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnViewLogActionPerformed

        try {
            saveLogReport(viewFile);
            Process process = Runtime.getRuntime().exec("cmd.exe /c start " + viewFile);
        } catch (IOException ex) {
            System.out.println("Fail to execute command: cmd.exe /c start " + viewFile);
            ex.printStackTrace();
        }

    }//GEN-LAST:event_mnViewLogActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DAnalyzerFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DAnalyzerFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DAnalyzerFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DAnalyzerFace.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DAnalyzerFace().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCheckSettings;
    private javax.swing.JButton btCheckUser;
    private javax.swing.JComboBox<String> cbDirType;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem mnAbout;
    private javax.swing.JMenuBar mnBar;
    private javax.swing.JMenuItem mnClearLog;
    private javax.swing.JMenuItem mnExit;
    private javax.swing.JMenu mnHelper;
    private javax.swing.JMenuItem mnSaveLog;
    private javax.swing.JMenuItem mnViewLog;
    private javax.swing.JProgressBar pbStatus;
    private javax.swing.JTable tbGroups;
    private javax.swing.JTable tbLogs;
    private javax.swing.JTable tbSettings;
    private javax.swing.JTable tbUsers;
    private javax.swing.JTabbedPane tpUserGroup;
    private javax.swing.JTextField txtHostURL;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JPasswordField txtUserPwd;
    // End of variables declaration//GEN-END:variables

    private void readLDAPSettings(boolean initialize) {

        mapLDAPSettings.clear();
        mapLDAPSettings.put(ATT_LDAP_PROVIDER, cbDirType.getSelectedItem() == null ? SERVER_ACTIVE_DIR_SERVICE : cbDirType.getSelectedItem());
        mapLDAPSettings.put(ATT_URL, txtHostURL.getText());
        mapLDAPSettings.put(ATT_MECHANISM, "simple");// default

        DefaultTableModel tbModel = (DefaultTableModel) tbSettings.getModel();
        Vector<Vector<String>> datas = tbModel.getDataVector();
        for (Vector<String> data : datas) {
            String key = (String) data.get(1);
            if (key == null) {
                key = (String) data.get(2);
            }
            mapLDAPSettings.put(key, (String) data.get(3));
        }

        mapLDAPSettings.put(ATT_SEARCH_COUNT, intCountLimit);

        if (fake) {
            fakeSettings();
        } else {
            if (initialize) {
                readFromDataFile();
            }
        }

    }

    private void fakeSettings() {
        String strDirType = "";
        String strURL = null;
        String strDomain = null;
        String strPrincipal = null;
        String strCredential = null;
        String strUserBaseDN = null;
        String strAllUsersFilter = null;
        String strUserSearchScope = null;
        String strMechanism = null;
        String strUserFromNameFilter = null;
        String strUserNameAttribute = null;
        String strUserObjectClass = null;
        String strGroupBaseDN = null;
        String strAllGroupsFilter = null;
        String strGroupFromNameFilter = null;
        String strGroupSearchScope = null;
        String strGroupNameAttribute = null;
        String strGroupObjectClass = null;
        String strMemberDNAttribute = null;
        String strGroupDNsMemberShip = null;
        String strGuidAttribute = null;
        String strUserEntryDNAttribute = null;
        String strMandatoryAttrs = null;

        strURL = "ldap://www.zflexldap.com:389";
        strDomain = "zflexldap.com";
        strPrincipal = "cn=ro_admin,ou=sysadmins,dc=zflexsoftware,dc=com";
        strCredential = "zflexpass";
        strUserBaseDN = "DC=ZFLEXSOFTWARE,DC=COM";
        strAllUsersFilter = "(objectclass=person)";
        //strAllUsersFilter = "(cn=*)";
        strUserSearchScope = "SUB_TREE";
        strMechanism = "simple";
        strUserNameAttribute = "uid";
        strUserObjectClass = "person";
        strUserFromNameFilter = "(&(" + strUserNameAttribute + "=%u)(objectclass=" + strUserObjectClass + "))";;
        strGroupBaseDN = "ou=depts,DC=ZFLEXSOFTWARE,DC=COM";
        strAllGroupsFilter = "(objectclass=groupofnames)";
        //strAllGroupsFilter = "(objectclass=group)";
        strGroupSearchScope = "SUB_TREE";
        strGroupNameAttribute = "cn";
        strGroupObjectClass = "groupofnames";
        strMemberDNAttribute = "member";
        strGroupFromNameFilter = "(&(" + strGroupNameAttribute + "=%g)(objectclass=" + strGroupObjectClass + "))";
        strGroupDNsMemberShip = "(&(" + strMemberDNAttribute + "=%M)(objectclass=" + strGroupObjectClass + "))";
        strGuidAttribute = "cn";
        strUserEntryDNAttribute = "cn";
        strMandatoryAttrs = "modifyTimestamp";

        mapLDAPSettings.put(ATT_URL, strURL);
        mapLDAPSettings.put(ATT_DOMAIN, strDomain);
        mapLDAPSettings.put(ATT_PRINCIPAL, strPrincipal);
        mapLDAPSettings.put(ATT_CREDENTIAL, strCredential);
        mapLDAPSettings.put(ATT_USER_BASE_DN, strUserBaseDN);
        mapLDAPSettings.put(ATT_ALL_USERS_FILTER, strAllUsersFilter);
        mapLDAPSettings.put(ATT_USER_SEARCH_SCOPE, strUserSearchScope);
        mapLDAPSettings.put(ATT_MECHANISM, strMechanism);
        mapLDAPSettings.put(ATT_USER_NAME_ATTRIBUTE, strUserNameAttribute);
        mapLDAPSettings.put(ATT_USER_OBJECT_CLASS, strUserObjectClass);
        mapLDAPSettings.put(ATT_USER_FROM_NAME_FILTER, strUserFromNameFilter);
        mapLDAPSettings.put(ATT_GROUP_BASE_DN, strGroupBaseDN);
        mapLDAPSettings.put(ATT_ALL_GROUPS_FILTER, strAllGroupsFilter);
        mapLDAPSettings.put(ATT_GROUP_SEARCH_SCOPE, strGroupSearchScope);
        mapLDAPSettings.put(ATT_STATIC_GROUP_NAME_ATTRIBUTE, strGroupNameAttribute);
        mapLDAPSettings.put(ATT_STATIC_GROUP_OBJECT_CLASS, strGroupObjectClass);
        mapLDAPSettings.put(ATT_GROUP_FROM_NAME_FILTER, strGroupFromNameFilter);
        mapLDAPSettings.put(ATT_STATIC_MEMBER_DN_ATTRIBUTE, strMemberDNAttribute);
        mapLDAPSettings.put(ATT_STATIC_GROUP_DNS_FROM_MEMBER_DN_FILTER, strGroupDNsMemberShip);
        mapLDAPSettings.put(ATT_GUID_ATTRIBUTE, strGuidAttribute);
        mapLDAPSettings.put(ATT_USER_ENTRY_DN_ATTRIBUTE, strUserEntryDNAttribute);
        mapLDAPSettings.put(ATT_AGILE_MANDATORY_ATTRIBUTES, strMandatoryAttrs);
    }

    private void fillUsersTable(Map<String, String> usernameDNs) {
        DefaultTableModel tbModel = (DefaultTableModel) tbUsers.getModel();
        tbModel.setRowCount(0); // delete all existing rows
        if (usernameDNs == null) {
            return;
        }
        for (HashMap.Entry<String, String> entry : usernameDNs.entrySet()) {
            tbModel.addRow(new Object[]{entry.getKey(), entry.getValue()});
        }
    }

    private void fillGroupsTable(Map<String, String> groupnameDNs) {
        DefaultTableModel tbModel = (DefaultTableModel) tbGroups.getModel();
        tbModel.setRowCount(0); // delete all existing rows
        if (groupnameDNs == null) {
            return;
        }
        for (HashMap.Entry<String, String> entry : groupnameDNs.entrySet()) {
            tbModel.addRow(new Object[]{entry.getKey(), entry.getValue()});
        }
    }

    private void initLDAPAttributes(boolean agileSpecific) {

        String[] colNames = new String[]{
            "Req", "Weblogic", "Agile", "Value", "Comment"
        };
        DefaultTableModel tbModel = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                colNames
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        tbSettings = new JTable() {
            public TableCellRenderer getCellRenderer(int row, int column) {
                //if (((String)tbSettings.getValueAt(row, column)).equals(ATT_CREDENTIAL))
                if (row == (enableAgile ? 2 : 1) && column == 3) {
                    return new PasswordFieldTableCellRenderer();
                } else {
                    return super.getCellRenderer(row, column);
                }
            }
        };

        jScrollPane4.setViewportView(tbSettings);
        tbModel.setRowCount(0); // delete all existing rows
        tbSettings.setModel(tbModel);

        for (int i = 0; i < ldapAttrs.length; i++) {
            if (!agileSpecific && ldapAttrs[i][1] == null) {
                continue;
            }
            tbModel.addRow(ldapAttrs[i]);
        }
        if (!agileSpecific) {
            tbSettings.getColumnModel().getColumn(2).setMinWidth(0);
            tbSettings.getColumnModel().getColumn(2).setMaxWidth(0);
            //tbSettings.setRowHeight(1, tbSettings.getRowHeight(0) + 5);
        } else {
            //tbSettings.setRowHeight(2, tbSettings.getRowHeight(0) + 5);
        }
        tbSettings.getColumnModel().getColumn(0).setMinWidth(0);
        tbSettings.getColumnModel().getColumn(0).setMaxWidth(0);

        int rows = tbModel.getRowCount();
        for (int i = 0; i < rows; i++) {
            String colName = (String) tbModel.getValueAt(i, 1);
            if (colName == null || colName.equals("")) {
                colName = (String) tbModel.getValueAt(i, 2);
            }
            tbSettings.setValueAt((String) mapLDAPSettings.get(colName), i, 3);
        }

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(Color.orange);
        tbSettings.getColumnModel().getColumn(3).setHeaderRenderer(headerRenderer);

        // init
        cbDirType.setSelectedItem(mapLDAPSettings.get(DAConstants.ATT_LDAP_PROVIDER));
        txtHostURL.setText((String) mapLDAPSettings.get(DAConstants.ATT_URL));
    }

    private void log2Table(String result, String request, String parameter, String response, String action) {
        //txtLog.append("\n" + txt);
        DefaultTableModel tbModel = (DefaultTableModel) this.tbLogs.getModel();
        tbModel.addRow(new String[]{result, request, parameter, response, action});
    }

    private void log2Table(ArrayList content) {
        //txtLog.append("\n" + txt);
        DefaultTableModel tbModel = (DefaultTableModel) this.tbLogs.getModel();
        Iterator it = content.iterator();
        while (it.hasNext()) {
            String[] ss = (String[]) it.next();
            tbModel.addRow(ss);
        }

    }

    private String getStackTrace(Throwable t) {
        StringBuffer sb = new StringBuffer();
        try {
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            PrintStream ps = new PrintStream(bos);
            t.printStackTrace(ps);

            ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
            BufferedReader br = new BufferedReader(new InputStreamReader(bis));
            String s = null;
            while ((s = br.readLine().toString()) != null) {
                sb.append(s);
            }

        } catch (Exception e) {
            // do nothing
        }
        return sb.toString();
    }

    private void initLDAPTypes() {

        cbDirType.removeAllItems();
        cbDirType.addItem(SERVER_ACTIVE_DIR_SERVICE);
        cbDirType.addItem(SERVER_ACTIVE_DIR_LDS_SERVICE);
        cbDirType.addItem(SERVER_SUN_ONE_SERVICE);
        cbDirType.addItem(SERVER_ORACLE_INTERNET_DIRECTORY_SERVICE);
        cbDirType.addItem(SERVER_ORACLE_VIRTUAL_DIRECTORY_SERVICE);
        cbDirType.addItem(SERVER_OTHER_SERVICE);

    }

    private void showRecommendation(boolean switchDir, boolean initialize) {
        readLDAPSettings(initialize);
        initLDAPAttributes(enableAgile);

        int type = -1;
        switch ((String) mapLDAPSettings.get(ATT_LDAP_PROVIDER)) {
            case SERVER_ACTIVE_DIR_SERVICE:
                type = 0;
                break;
            case SERVER_ACTIVE_DIR_LDS_SERVICE:
                type = 1;
                break;
            case SERVER_SUN_ONE_SERVICE:
                type = 2;
                break;
            case SERVER_ORACLE_INTERNET_DIRECTORY_SERVICE:
                type = 3;
                break;
            case SERVER_ORACLE_VIRTUAL_DIRECTORY_SERVICE:
                type = 4;
                break;
            case SERVER_OTHER_SERVICE:
                type = 5;
                break;
        }

        String[][] oneRecommend = recommends[type];
        /* 
        oneRecommend[][0]: *
        oneRecommend[][1]: default value
        oneRecommend[][2]: recommendation
         */
        DefaultTableModel tbModel = (DefaultTableModel) tbSettings.getModel();
        for (int i = 0, j = 0; i < oneRecommend.length; i++) {
            if (!enableAgile && ldapAttrs[i][1] == null) {
                continue;
            }
            tbModel.setValueAt(oneRecommend[i][0], j, 0); //*

            String val = null;
            if (switchDir){
                val = oneRecommend[i][1];
                if (val == null) {
                    String col = (String) tbModel.getValueAt(j, 1);
                    if (col == null || col.equals("")) {
                        col = (String) tbModel.getValueAt(j, 2);
                    }
                    val = (String) mapLDAPSettings.get(col);
                }
            }else{
                String col = (String) tbModel.getValueAt(j, 1);
                if (col == null || col.equals("")) {
                    col = (String) tbModel.getValueAt(j, 2);
                }
                val = (String) mapLDAPSettings.get(col);
                if (val == null) {
                    val = oneRecommend[i][1];
                }
            }
             
            /*
            String col = (String) tbModel.getValueAt(j, 1);
            if (col == null || col.equals("")) {
                col = (String) tbModel.getValueAt(j, 2);
            }
            String val = (String) mapLDAPSettings.get(col);
            if (val == null) {
                val = oneRecommend[i][1];
            }
            */

            tbModel.setValueAt(val, j, 3);
            tbModel.setValueAt(oneRecommend[i][2], j, 4);

            j++;
        }
    }

    private void saveLogReport(String fileToSave) {
        DefaultTableModel tbModel = (DefaultTableModel) this.tbLogs.getModel();
        int ir = tbModel.getRowCount();
        int ic = tbModel.getColumnCount();

        String tdClass = "style='background-color:yellow;'";
        String actionClass = "class='awrnc2'";
        StringBuffer output = new StringBuffer("<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"utf-8\"><title></title><style type=\"text/css\">body.awr {font:bold 10pt Arial,Helvetica,Geneva,sans-serif;color:black; background:White;}h1.awr {font:bold 20pt Arial,Helvetica,Geneva,sans-serif;color:#336699;background-color:White;border-bottom:1px solid #cccc99;margin-top:0pt; margin-bottom:0pt;padding:0px 0px 0px 0px;}th.awrnobg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:green; background:white;padding-left:4px; padding-right:4px;padding-bottom:2px}th.awrbg {font:bold 8pt Arial,Helvetica,Geneva,sans-serif; color:White; background:#0066CC;padding-left:4px; padding-right:4px;padding-bottom:2px}td.awrnc {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#fff0f0;vertical-align:top;}td.awrnc2 {font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:#e0f0f0;vertical-align:top;}table.tdiff {border_collapse: collapse; }table.xTBResult {border-collapse: collapse;}td.xTDResult {border:#ccc solid 1px;font:8pt Arial,Helvetica,Geneva,sans-serif;color:black;background:White;vertical-align:top;}</style></head><body><h1 class='awr'>" + "Report of " + DAConstants.APP_NAME + "</h1>");
        output.append("<table><tr><th class='awrbg'>&nbsp;</th><th class='awrbg'>Request</th><th class='awrbg'>Parameter</th><th class='awrbg'>Response</th><th class='awrbg'>Action</th></tr>");
        for (int i = 0; i < ir; i++) {
            output.append("<tr>");
            for (int j = 0; j < ic; j++) {
                String s = (String) tbModel.getValueAt(i, j);
                if (s == null) {
                    s = "";
                }
                if (s.equals("+")) {
                    if (actionClass.equals("class='awrnc2'")) {
                        actionClass = "class='awrnc'";
                    } else {
                        actionClass = "class='awrnc2'";
                    }
                }
                if (s.equals("X")) {
                    tdClass = "style='background-color:red;'";
                } else if (s.equals("?")) {
                    tdClass = "style='background-color:#FAF602;'";
                } else {
                    tdClass = "";
                }
                output.append("<td " + actionClass + " " + tdClass + " >" + s + "</td>");
            }
            output.append("</tr>");
        }
        output.append("</table>");
        output.append("<h4>Report Date: " + new Date() + "</h4>");
        output.append("</body></html>");

        String outString = output.toString().replaceAll(DAConstants.NEW_LINE, "<br/>");
        byte[] buffer = outString.getBytes();

        try (FileOutputStream fo = new FileOutputStream(fileToSave);
                BufferedOutputStream bos = new BufferedOutputStream(fo, 8 * 1024);) {
            bos.write(buffer);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initMyComponents() {
        JPopupMenu pmUserGroup = new JPopupMenu();
        pmUserGroupExport = new JMenuItem("Export to LDIF");
        pmUserGroupExport.addActionListener(this);
        pmUserGroup.add(pmUserGroupExport);
        tbUsers.setComponentPopupMenu(pmUserGroup);
        tbUsers.addMouseListener(new TableMouseListener(tbUsers));
        tbGroups.setComponentPopupMenu(pmUserGroup);
        tbGroups.addMouseListener(new TableMouseListener(tbGroups));
    }

    private void readFromDataFile() {
        ObjectInputStream ois = null;
        try {
            ois = new ObjectInputStream(new FileInputStream(dataFile));
            Object result = ois.readObject();
            ois.close();
            mapLDAPSettings = (LinkedHashMap<String, Object>) result;
        } catch (Exception ex) {
            //ex.printStackTrace();
        }
    }

    /**
     *
     */
    public class LongRunningThread extends Thread {

        private String action;
        private String para;

        LongRunningThread(String action, String para) {
            this.action = action;
            this.para = para;
        }

        /**
         *
         */
        public void run() {
            enableComponents(false);
            readLDAPSettings(false);
            saveLDAPSettings();
            try {
                DAnalyzer da = null;
                if (CLICK_CONNECT_LDAP.equalsIgnoreCase(action)) { // Validate WLS setting
                    DefaultTableModel tbModel = (DefaultTableModel) tbUsers.getModel();
                    tbModel.setRowCount(0);
                    tbModel = (DefaultTableModel) tbGroups.getModel();
                    tbModel.setRowCount(0);

                    da = new DAnalyzer(CLICK_CONNECT_LDAP, mapLDAPSettings);
                    log2Table(da.outputReport());
                    
                    if (mapLDAPSettings.get(DAConstants.ATT_USER_BASE_DN) != null && (!"".equals((String) mapLDAPSettings.get(DAConstants.ATT_USER_BASE_DN)))) {
                        TreeMap usernameDNs = (TreeMap) da.loadUsers(enableAgile);
                        if (enableAgile
                                && (mapLDAPSettings.get(DAConstants.ATT_GROUP_BASE_DN) != null && (!"".equals((String) mapLDAPSettings.get(DAConstants.ATT_GROUP_BASE_DN))))) {
                            TreeMap usernameDNsFromGroupFilter;
                            usernameDNsFromGroupFilter = (TreeMap) da.loadUsersFromGroup(enableAgile);
                            if (usernameDNsFromGroupFilter != null) {
                                usernameDNs.putAll(usernameDNsFromGroupFilter);
                            }
                        }
                        fillUsersTable(usernameDNs);
                        log2Table(da.outputReport());
                    }
                    if (mapLDAPSettings.get(DAConstants.ATT_GROUP_BASE_DN) != null && (!"".equals((String) mapLDAPSettings.get(DAConstants.ATT_GROUP_BASE_DN)))) {
                        TreeMap groupnameDNs = (TreeMap) da.loadGroups();
                        fillGroupsTable(groupnameDNs);
                        log2Table(da.outputReport());
                    }

                } else if (CLICK_VALIDATE_USER.equalsIgnoreCase(action)) {  // Validate User Logon and Approver
                    String userID = txtUserID.getText().trim();
                    String userPwd = String.copyValueOf(txtUserPwd.getPassword());

                    if (userID == null || userID.equals("")
                            || userPwd == null || userPwd.equals("")) {
                        JOptionPane.showMessageDialog(null, "User ID and Password are both required.", null, JOptionPane.ERROR_MESSAGE);
                        enableComponents(true);
                        return;
                    }
                    da = new DAnalyzer(CLICK_VALIDATE_USER, mapLDAPSettings);
                    log2Table(da.outputReport());

                    da.readLdifByName(userID, true); // this is additional checking in case this user is not in Users table.
                    log2Table(da.outputReport());

                    da.verifyLogon(userID, userPwd);
                    log2Table(da.outputReport());

                    if (enableAgile) {
                        da.verifyApproval(userID, userPwd);
                        log2Table(da.outputReport());
                    }

                } else if (CLICK_EXPORT_LDIF.equalsIgnoreCase(action)) { // export to ldif
                    da = new DAnalyzer(CLICK_EXPORT_LDIF, mapLDAPSettings);
                    log2Table(da.outputReport());

                    da.readLdifByDN(para);
                    log2Table(da.outputReport());
                }
                da.release();
            } catch (Exception e) {
                e.printStackTrace();
                log2Table("X", action, "", e.toString(), "Check init, request and parameter based on error");
            }
            enableComponents(true);
        }

        private void enableComponents(boolean enable) {
            setCursor(!enable ? Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR) : null);
            btCheckSettings.setEnabled(enable);
            btCheckUser.setEnabled(enable);
            mnSaveLog.setEnabled(enable);
            mnViewLog.setEnabled(enable);
            cbDirType.setEnabled(enable);
            txtHostURL.setEnabled(enable);
            pbStatus.setIndeterminate(!enable);
            pbStatus.setValue(100);
            pmUserGroupExport.setEnabled(enable);
        }

    }

    /**
     *
     * @param event
     */
    @Override
    public void actionPerformed(ActionEvent event) {
        JMenuItem menu = (JMenuItem) event.getSource();
        if (menu == pmUserGroupExport) {
            DefaultTableModel tbModel = null;
            int r = -1;
            switch (tpUserGroup.getSelectedIndex()) {
                case 0:
                    tbModel = (DefaultTableModel) tbUsers.getModel();
                    r = tbUsers.getSelectedRow();
                    break;
                case 1:
                    tbModel = (DefaultTableModel) tbGroups.getModel();
                    r = tbGroups.getSelectedRow();
                    break;
            }
            String dn = (String) tbModel.getValueAt(r, 1);
            new LongRunningThread(CLICK_EXPORT_LDIF, dn).start();

        }
    }

    public void saveLDAPSettings() {
        ObjectOutputStream oos;
        try {
            oos = new ObjectOutputStream(new FileOutputStream(dataFile));
            oos.writeObject(mapLDAPSettings);
            oos.flush();
            oos.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
